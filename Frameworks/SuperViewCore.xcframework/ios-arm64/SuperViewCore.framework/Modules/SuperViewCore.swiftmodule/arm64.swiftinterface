// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.1 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SuperViewCore
import AVFoundation
import Foundation
import GCDWebServer
import Network
import PDFKit
import QuartzCore
import SafariServices
import StoreKit
@_exported import SuperViewCore
import Swift
import UIKit
import UserNotifications
import WebKit
@objc public protocol ScrollingNavigationControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func scrollingNavigationController(_ controller: SuperViewCore.ScrollingNavigationController, didChangeState state: SuperViewCore.NavigationBarState)
  @objc optional func scrollingNavigationController(_ controller: SuperViewCore.ScrollingNavigationController, willChangeState state: SuperViewCore.NavigationBarState)
}
@objc public enum NavigationBarState : Swift.Int {
  case collapsed, expanded, scrolling
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NavigationBarCollapseDirection : Swift.Int {
  case scrollUp = -1
  case scrollDown = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NavigationBarFollowerCollapseDirection : Swift.Int {
  case scrollUp = -1
  case scrollDown = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class NavigationBarFollower : ObjectiveC.NSObject {
  @objc weak public var view: UIKit.UIView?
  @objc public var direction: SuperViewCore.NavigationBarFollowerCollapseDirection
  @objc public init(view: UIKit.UIView, direction: SuperViewCore.NavigationBarFollowerCollapseDirection = .scrollUp)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class ScrollingNavigationController : UIKit.UINavigationController, UIKit.UIGestureRecognizerDelegate {
  @objc open var state: SuperViewCore.NavigationBarState {
    @objc get
  }
  @objc open var shouldScrollWhenContentFits: Swift.Bool
  @objc open var expandOnActive: Swift.Bool
  @objc open var scrollingEnabled: Swift.Bool
  @objc weak open var scrollingNavbarDelegate: SuperViewCore.ScrollingNavigationControllerDelegate?
  @objc open var followers: [SuperViewCore.NavigationBarFollower]
  @objc open var shouldUpdateContentInset: Swift.Bool
  @objc open var shouldScrollWhenTableViewIsEditing: Swift.Bool
  @objc open var percentage: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var gestureRecognizer: UIKit.UIPanGestureRecognizer? {
    get
  }
  @objc open func followScrollView(_ scrollableView: UIKit.UIView, delay: Swift.Double = 0, scrollSpeedFactor: Swift.Double = 1, collapseDirection: SuperViewCore.NavigationBarCollapseDirection = .scrollDown, followers: [SuperViewCore.NavigationBarFollower] = [])
  @objc open func hideNavbar(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.1)
  @objc open func showNavbar(animated: Swift.Bool = true, duration: Foundation.TimeInterval = 0.1)
  @objc open func stopFollowingScrollView(showingNavbar: Swift.Bool = true)
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc open func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public struct GPSOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var willRequestAlways: Swift.Bool
  public var permissionOnLaunch: Swift.Bool
  public init(isEnabled: Swift.Bool? = nil, willRequestAlways: Swift.Bool? = nil, permissionOnLaunch: Swift.Bool? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class MethodSwizzler {
  public static func swizzleMethods(cls: Swift.AnyClass, originalSelector: ObjectiveC.Selector, overrideSelector: ObjectiveC.Selector)
  @objc deinit
}
public struct SideMenuEnums {
  public enum Position {
    case left
    case right
    public static func == (a: SuperViewCore.SideMenuEnums.Position, b: SuperViewCore.SideMenuEnums.Position) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public struct FreshchatOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var appId: Swift.String?
  public var appKey: Swift.String?
  public init(isEnabled: Swift.Bool = false, appId: Swift.String? = nil, appKey: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomFontOptions : Swift.Codable {
  public var name: Swift.String?
  public var size: Swift.Float?
  public init(name: Swift.String? = nil, size: Swift.Float? = 15)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SuperToolbarEvent {
  case goBack
  case goForward
  case purchase
  case reload
  case goTo(url: Swift.String)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class SuperToolbar : UIKit.UIToolbar {
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
final public class ActivityData {
  public init(size: CoreGraphics.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, messageSpacing: CoreGraphics.CGFloat? = nil, type: SuperViewCore.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class NVActivityIndicatorPresenter {
  public static let sharedInstance: SuperViewCore.NVActivityIndicatorPresenter
  final public var isAnimating: Swift.Bool {
    get
  }
  final public func startAnimating(_ data: SuperViewCore.ActivityData, _ fadeInAnimation: SuperViewCore.FadeInAnimation?)
  final public func stopAnimating(_ fadeOutAnimation: SuperViewCore.FadeOutAnimation?)
  final public func setMessage(_ message: Swift.String?)
  @objc deinit
}
public struct ActivityIndicatorOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var splashProgress: Swift.Bool
  public var splashContentMode: Swift.Int
  public var message: Swift.String
  public var type: Swift.Int
  public var backgroundColor: Swift.String
  public var progressColor: Swift.String
  public init(isEnabled: Swift.Bool? = nil, splashProgress: Swift.Bool? = nil, splashContentMode: Swift.Int? = nil, message: Swift.String? = nil, type: Swift.Int? = nil, backgroundColor: Swift.String? = nil, progressColor: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension NSNotification.Name {
  public static let superViewOpenURL: Foundation.NSNotification.Name
}
public struct WebViewOptions : Swift.Codable {
  public var url: Swift.String?
  public var isRTL: Swift.Bool
  public var allowPullToRefresh: Swift.Bool
  public var allowBounce: Swift.Bool
  public var customUserAgent: Swift.String
  public var userScript: Swift.String
  public var allowVideoPlayInline: Swift.Bool
  public var allowLinkPreview: Swift.Bool
  public var allowBackForwardSwipe: Swift.Bool
  public var allowCache: Swift.Bool
  public var allowZoom: Swift.Bool
  public var allowPictureInPicture: Swift.Bool
  public var waitUntilLoaded: Swift.Bool
  public var useTopSafeArea: Swift.Bool
  public var useBottomSafeArea: Swift.Bool
  public var openAllExternalLinks: Swift.Bool
  public var useWindowOpen: Swift.Bool
  public var externalLinks: [Swift.String]
  public var customURLSchemes: [Swift.String]
  public var backgroundColor: Swift.String
  public var mediaTypesRequiringUserActionForPlayback: Swift.Int
  public init(url: Swift.String? = nil, isRTL: Swift.Bool? = false, customUserAgent: Swift.String? = nil, userScript: Swift.String? = nil, allowPullToRefresh: Swift.Bool? = true, allowBounce: Swift.Bool? = true, allowVideoPlayInline: Swift.Bool? = true, allowLinkPreview: Swift.Bool? = true, allowBackForwardSwipe: Swift.Bool? = true, allowCache: Swift.Bool? = true, allowZoom: Swift.Bool? = true, allowPictureInPicture: Swift.Bool? = true, waitUntilLoaded: Swift.Bool? = true, useTopSafeArea: Swift.Bool? = false, useBottomSafeArea: Swift.Bool? = false, openAllExternalLinks: Swift.Bool? = false, externalLinks: [Swift.String]? = [], useWindowOpen: Swift.Bool = true, customURLSchemes: [Swift.String]? = [], backgroundColor: Swift.String? = nil, mediaTypesRequiringUserActionForPlayback: Swift.Int? = 3)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers open class SuperWebView : WebKit.WKWebView {
  weak public var delegate: SuperViewCore.SuperWebViewDelegate?
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect, configuration: WebKit.WKWebViewConfiguration)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SuperWebView {
  @objc dynamic open func setupBridge()
  @objc dynamic open func setupLocation()
  @objc dynamic open func setupLocationBridge()
  @objc dynamic open func setupAdMobBridge()
  @objc dynamic open func setupOneSignalBridge()
  @objc dynamic open func setupTwilioBridge()
  @objc dynamic open func setupCardIOBridge()
  @objc dynamic open func setupCardScanBridge()
  @objc dynamic open func setupFacebookBridge()
  @objc dynamic open func setupQRBridge()
  @objc dynamic open func setupFirebaseBridge()
  @objc dynamic open func setupFreshchatBridge()
}
extension SuperWebView : WebKit.WKUIDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
  @objc dynamic public func webViewDidClose(_ webView: WebKit.WKWebView)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptAlertPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping () -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptConfirmPanelWithMessage message: Swift.String, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, runJavaScriptTextInputPanelWithPrompt prompt: Swift.String, defaultText: Swift.String?, initiatedByFrame frame: WebKit.WKFrameInfo, completionHandler: @escaping (Swift.String?) -> Swift.Void)
}
extension SuperWebView : WebKit.WKURLSchemeHandler {
  @available(iOS 11.0, *)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, start urlSchemeTask: WebKit.WKURLSchemeTask)
  @available(iOS 11.0, *)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, stop urlSchemeTask: WebKit.WKURLSchemeTask)
}
extension SuperWebView : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
public enum RestMethod : Swift.String {
  case get
  case post
  case put
  case delete
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Endpoint : Swift.String {
  case oneSignal
  case envatoSale
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class NetworkManager {
  public init(endpoint: SuperViewCore.Endpoint)
  @objc deinit
}
extension NetworkManager {
  public typealias CompletionBlock<D> = ((D?, Swift.Error?) -> Swift.Void) where D : Swift.Decodable
  public func get<D>(endpoint: Swift.String, responseType: D.Type, params: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping SuperViewCore.NetworkManager.CompletionBlock<D>) where D : Swift.Decodable
  public func post<E, D>(endpoint: Swift.String, responseType: D.Type, payload: E?, params: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping SuperViewCore.NetworkManager.CompletionBlock<D>) where E : Swift.Encodable, D : Swift.Decodable
  public func put<E, D>(endpoint: Swift.String, responseType: D.Type, payload: E?, params: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping SuperViewCore.NetworkManager.CompletionBlock<D>) where E : Swift.Encodable, D : Swift.Decodable
  public func delete<E, D>(endpoint: Swift.String, responseType: D.Type, payload: E?, params: [Swift.String : Swift.String]? = nil, headers: [Swift.String : Swift.String]? = nil, completion: @escaping SuperViewCore.NetworkManager.CompletionBlock<D>) where E : Swift.Encodable, D : Swift.Decodable
}
@objc @_inheritsConvenienceInitializers @objcMembers open class SuperWebViewController : SuperViewCore.ScrollingNavigationViewController, SuperViewCore.NVActivityIndicatorViewable {
  @objc open var webView: SuperViewCore.SuperWebView!
  @objc open var toolbar: SuperViewCore.SuperToolbar!
  @objc open var bannerView: UIKit.UIView!
  @objc open var interstitial: ObjectiveC.NSObject!
  @objc open var rewardedAd: ObjectiveC.NSObject!
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension SuperWebViewController {
  @objc dynamic public func scrollViewWillBeginZooming(_ scrollView: UIKit.UIScrollView, with view: UIKit.UIView?)
}
extension SuperWebViewController : WebKit.WKNavigationDelegate {
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
}
extension SuperWebViewController : SuperViewCore.SuperToolbarDelegate {
  public func superToolbar(_ event: SuperViewCore.SuperToolbarEvent)
}
extension SuperWebViewController : SuperViewCore.SuperWebViewDelegate {
  public func superWebView(_ event: SuperViewCore.SuperWebViewEvent)
}
extension SuperWebViewController {
  @objc dynamic public func setupAds()
  @objc dynamic public func setupFacebookAds()
  @objc dynamic public func presentInterstitialAd()
  @objc dynamic public func presentRewardBasedVideoAd()
}
extension SuperWebViewController : UIKit.UIViewControllerPreviewingDelegate {
  @objc dynamic public func previewingContext(_ previewingContext: UIKit.UIViewControllerPreviewing, commit viewControllerToCommit: UIKit.UIViewController)
  @objc dynamic public func previewingContext(_ previewingContext: UIKit.UIViewControllerPreviewing, viewControllerForLocation location: CoreGraphics.CGPoint) -> UIKit.UIViewController?
}
extension SuperWebViewController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarUpdateAnimation: UIKit.UIStatusBarAnimation {
    @objc get
  }
}
public struct SideMenuOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var backgroundColor: Swift.String
  public var buttonColor: Swift.String
  public var items: [SuperViewCore.CustomButton]?
  public init(isEnabled: Swift.Bool? = false, backgroundColor: Swift.String? = nil, buttonColor: Swift.String? = nil, items: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct InAppPurchaseOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var productId: Swift.String?
  public init(isEnabled: Swift.Bool? = false, productId: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SuperViewOptions : Swift.Codable {
  public var purchaseCode: Swift.String?
  public var activityIndicator: SuperViewCore.ActivityIndicatorOptions!
  public var adMob: SuperViewCore.AdMobOptions!
  public var freshchat: SuperViewCore.FreshchatOptions!
  public var facebook: SuperViewCore.FacebookOptions!
  public var font: SuperViewCore.CustomFontOptions!
  public var gps: SuperViewCore.GPSOptions!
  public var inAppPurchase: SuperViewCore.InAppPurchaseOptions!
  public var navigationBar: SuperViewCore.NavigationBarOptions!
  public var oneSignal: SuperViewCore.OneSignalOptions!
  public var rateMyApp: SuperViewCore.RateMyAppOptions!
  public var sideMenu: SuperViewCore.SideMenuOptions!
  public var toolbar: SuperViewCore.ToolbarOptions!
  public var webView: SuperViewCore.WebViewOptions!
  public init(purchaseCode: Swift.String? = nil, activityIndicator: SuperViewCore.ActivityIndicatorOptions = ActivityIndicatorOptions(), adMob: SuperViewCore.AdMobOptions = AdMobOptions(), freshchat: SuperViewCore.FreshchatOptions = FreshchatOptions(), facebook: SuperViewCore.FacebookOptions = FacebookOptions(), font: SuperViewCore.CustomFontOptions = CustomFontOptions(), gps: SuperViewCore.GPSOptions = GPSOptions(), inAppPurchase: SuperViewCore.InAppPurchaseOptions = InAppPurchaseOptions(), navigationBar: SuperViewCore.NavigationBarOptions = NavigationBarOptions(), oneSignal: SuperViewCore.OneSignalOptions = OneSignalOptions(), rateMyApp: SuperViewCore.RateMyAppOptions = RateMyAppOptions(), sideMenu: SuperViewCore.SideMenuOptions = SideMenuOptions(), toolbar: SuperViewCore.ToolbarOptions = ToolbarOptions(), webView: SuperViewCore.WebViewOptions = WebViewOptions())
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RateMyAppOptions : Swift.Codable {
  public static let promptForReviewCounter: Swift.Int
  public var isEnabled: Swift.Bool
  public var promptForReviewCounter: Swift.Int
  public init(isEnabled: Swift.Bool? = true, appleID: Swift.String? = nil, promptForReviewCounter: Swift.Int? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension UIView {
  public func fadeIn(duration: Foundation.TimeInterval = 0.5, delay: Foundation.TimeInterval = 0.0, completion: @escaping ((Swift.Bool) -> Swift.Void) = { (finished: Bool) -> Void in })
  public func fadeOut(duration: Foundation.TimeInterval = 0.5, delay: Foundation.TimeInterval = 0.0, completion: @escaping (Swift.Bool) -> Swift.Void = { (finished: Bool) -> Void in })
  public func anckorToSuperView()
  public func anchor(top: UIKit.NSLayoutYAxisAnchor?, leading: UIKit.NSLayoutXAxisAnchor?, trailing: UIKit.NSLayoutXAxisAnchor?, bottom: UIKit.NSLayoutYAxisAnchor?, padding: UIKit.UIEdgeInsets = .zero, size: CoreGraphics.CGSize = .zero)
}
public struct NavigationBarOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var enableProgress: Swift.Bool
  public var backgroundColor: Swift.String
  public var titleColor: Swift.String
  public var progressColor: Swift.String
  public var isStatusBarLight: Swift.Bool
  public var rightButton: SuperViewCore.CustomButton?
  public init(isEnabled: Swift.Bool? = nil, backgroundColor: Swift.String? = nil, titleColor: Swift.String? = nil, enableProgress: Swift.Bool? = true, progressColor: Swift.String? = nil, isStatusBarLight: Swift.Bool? = true, rightButton: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_hasMissingDesignatedInitializers open class Bridge : ObjectiveC.NSObject {
  public struct JSError {
    public let code: Swift.Int
    public let description: Swift.String
    public init(code: Swift.Int, description: Swift.String)
  }
  public enum Results {
    case success([Swift.String : Any]?)
    case failure(SuperViewCore.Bridge.JSError)
  }
  public typealias Callback = (SuperViewCore.Bridge.Results) -> Swift.Void
  public typealias Handler = ([Swift.String : Any]?, (SuperViewCore.Bridge.Results) -> Swift.Void) -> Swift.Void
  public typealias DefaultHandler = (Swift.String, [Swift.String : Any]?, (SuperViewCore.Bridge.Results) -> Swift.Void) -> Swift.Void
  public var defaultHandler: SuperViewCore.Bridge.DefaultHandler?
  public var printScriptMessageAutomatically: Swift.Bool
  @objc deinit
  public func register(_ handler: @escaping SuperViewCore.Bridge.Handler, for action: Swift.String)
  public func unregister(for action: Swift.String)
  public func post(action: Swift.String, parameters: [Swift.String : Any]?)
  public func evaluate(_ javaScriptString: Swift.String, completion: ((Any?, Swift.Error?) -> Swift.Void)? = nil)
  @objc override dynamic public init()
}
extension Bridge : WebKit.WKScriptMessageHandler {
  @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension WKWebView {
  public var bridge: SuperViewCore.Bridge {
    get
  }
  public func removeBridge()
}
extension UIApplication {
  public class func topViewController(controller: UIKit.UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -> UIKit.UIViewController?
}
public struct ToolbarOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var backgroundColor: Swift.String
  public var buttonColor: Swift.String
  public var customButtons: [SuperViewCore.CustomButton]?
  public init(isEnabled: Swift.Bool = true, backgroundColor: Swift.String? = nil, buttonColor: Swift.String? = nil, customButtons: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension String {
  public func url() -> Foundation.URL?
}
extension UINavigationController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
}
public struct OneSignalOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var appId: Swift.String?
  public var restApiKey: Swift.String?
  public init(isEnabled: Swift.Bool? = false, appId: Swift.String? = nil, restApiKey: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum SuperWebViewEvent {
  case showInterstitialAd
  case showRewardedAd
  case startActivityIndicator
  case stopActivityIndicator
  public static func == (a: SuperViewCore.SuperWebViewEvent, b: SuperViewCore.SuperWebViewEvent) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SuperWebViewDelegate : AnyObject {
  func superWebView(_ event: SuperViewCore.SuperWebViewEvent)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SuperView : ObjectiveC.NSObject {
  @objc public static let shared: SuperViewCore.SuperView
  @objc public static let superViewLaunchURLKey: Swift.String
  public var options: SuperViewCore.SuperViewOptions!
  @objc public var application: UIKit.UIApplication!
  @objc public var launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?
  public static func configure(application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, useEnvironments: Swift.Bool?)
  @objc public static func configure(application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, plistURL: Foundation.URL? = Bundle.main.url(forResource: "Config", withExtension: "plist"))
  public static func configure(application: UIKit.UIApplication, launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?, options: SuperViewCore.SuperViewOptions)
  @objc public static func show()
  @objc @discardableResult
  public static func handleURL(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:]) -> Swift.Bool
  @objc public func handleFacebookURL(url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:])
  @objc public func openURL(url: Foundation.URL)
  @objc public static var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class SuperViewNavigationController : SuperViewCore.ScrollingNavigationController {
  @objc convenience public init(url: Swift.String)
  @objc convenience dynamic public init()
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc public func addDone()
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ScrollingNavigationViewController : UIKit.UIViewController, UIKit.UIScrollViewDelegate, UIKit.UINavigationControllerDelegate {
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc open func scrollViewShouldScrollToTop(_ scrollView: UIKit.UIScrollView) -> Swift.Bool
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol SelfAdMobAware : AnyObject {
  static func awake()
}
public protocol SelfCardIOAware : AnyObject {
  static func awake()
}
public protocol SelfCardScanAware : AnyObject {
  static func awake()
}
public protocol SelfFacebookAware : AnyObject {
  static func awake()
}
public protocol SelfLocationAware : AnyObject {
  static func awake()
}
public protocol SelfOneSignalAware : AnyObject {
  static func awake()
}
public protocol SelfTwilioAware : AnyObject {
  static func awake()
}
public protocol SelfScanQrAware : AnyObject {
  static func awake()
}
public protocol SelfFirebaseAware : AnyObject {
  static func awake()
}
public protocol SelfFreshchatAware : AnyObject {
  static func awake()
}
public protocol NVActivityIndicatorViewable {
}
extension NVActivityIndicatorViewable where Self : UIKit.UIViewController {
  public var isAnimating: Swift.Bool {
    get
  }
  public func startAnimating(_ size: CoreGraphics.CGSize? = nil, message: Swift.String? = nil, messageFont: UIKit.UIFont? = nil, type: SuperViewCore.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil, displayTimeThreshold: Swift.Int? = nil, minimumDisplayTime: Swift.Int? = nil, backgroundColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, fadeInAnimation: SuperViewCore.FadeInAnimation? = NVActivityIndicatorView.DEFAULT_FADE_IN_ANIMATION)
  public func stopAnimating(_ fadeOutAnimation: SuperViewCore.FadeOutAnimation? = NVActivityIndicatorView.DEFAULT_FADE_OUT_ANIMATION)
}
public typealias Color = UIKit.UIColor
public typealias Image = UIKit.UIImage
extension UIColor {
  convenience public init(_ hexString: Swift.String)
  convenience public init(hexInt: Swift.Int, alpha: Swift.Float = 1.0)
}
extension String {
  public var color: SuperViewCore.Color {
    get
  }
}
extension Int {
  public var color: SuperViewCore.Color {
    get
  }
}
extension UIColor {
  public func toImage(size: CoreGraphics.CGSize = CGSize(width: 1, height: 1)) -> SuperViewCore.Image?
}
public struct AdMobOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var appId: Swift.String?
  public var bannerUnitID: Swift.String?
  public var interstitialUnitID: Swift.String?
  public var rewardedUnitID: Swift.String?
  public init(isEnabled: Swift.Bool? = false, appId: Swift.String? = nil, bannerUnitID: Swift.String? = nil, interstitialUnitID: Swift.String? = nil, rewardedUnitID: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol SuperToolbarDelegate : AnyObject {
  func superToolbar(_ event: SuperViewCore.SuperToolbarEvent)
}
extension NSNotification.Name {
  public static let IAPHelperPurchaseNotification: Foundation.Notification.Name
}
@objc @_hasMissingDesignatedInitializers open class IAPHelper : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension IAPHelper {
  public class func isRemoveAdsPurchased() -> Swift.Bool
}
extension IAPHelper : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
}
extension IAPHelper : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
}
public struct CustomButton : Swift.Codable, Swift.Equatable {
  public var title: Swift.String?
  public var url: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public init(title: Swift.String, url: Swift.String?) throws
  public static func == (a: SuperViewCore.CustomButton, b: SuperViewCore.CustomButton) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FacebookOptions : Swift.Codable {
  public var isEnabled: Swift.Bool
  public var facebookID: Swift.String?
  public var bannerPlacementID: Swift.String?
  public var interstitialPlacementID: Swift.String?
  public init(isEnabled: Swift.Bool? = false, facebookID: Swift.String? = nil, bannerPlacementID: Swift.String? = nil, interstitialPlacementID: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum NVActivityIndicatorType : Swift.Int {
  case blank
  case ballPulse
  case ballGridPulse
  case ballClipRotate
  case squareSpin
  case ballClipRotatePulse
  case ballClipRotateMultiple
  case ballPulseRise
  case ballRotate
  case cubeTransition
  case ballZigZag
  case ballZigZagDeflect
  case ballTrianglePath
  case ballScale
  case lineScale
  case lineScaleParty
  case ballScaleMultiple
  case ballPulseSync
  case ballBeat
  case lineScalePulseOut
  case lineScalePulseOutRapid
  case ballScaleRipple
  case ballScaleRippleMultiple
  case ballSpinFadeLoader
  case lineSpinFadeLoader
  case triangleSkewSpin
  case pacman
  case ballGridBeat
  case semiCircleSpin
  case ballRotateChase
  case orbit
  case audioEqualizer
  case circleStrokeSpin
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias FadeInAnimation = (UIKit.UIView) -> Swift.Void
public typealias FadeOutAnimation = (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
@objc final public class NVActivityIndicatorView : UIKit.UIView {
  public static var DEFAULT_TYPE: SuperViewCore.NVActivityIndicatorType
  public static var DEFAULT_COLOR: UIKit.UIColor
  public static var DEFAULT_TEXT_COLOR: UIKit.UIColor
  public static var DEFAULT_PADDING: CoreGraphics.CGFloat
  public static var DEFAULT_BLOCKER_SIZE: CoreGraphics.CGSize
  public static var DEFAULT_BLOCKER_DISPLAY_TIME_THRESHOLD: Swift.Int
  public static var DEFAULT_BLOCKER_MINIMUM_DISPLAY_TIME: Swift.Int
  public static var DEFAULT_BLOCKER_MESSAGE: Swift.String?
  public static var DEFAULT_BLOCKER_MESSAGE_SPACING: CoreGraphics.CGFloat
  public static var DEFAULT_BLOCKER_MESSAGE_FONT: UIKit.UIFont
  public static var DEFAULT_BLOCKER_BACKGROUND_COLOR: UIKit.UIColor
  public static var DEFAULT_FADE_IN_ANIMATION: (UIKit.UIView) -> Swift.Void
  public static var DEFAULT_FADE_OUT_ANIMATION: (UIKit.UIView, @escaping () -> Swift.Void) -> Swift.Void
  final public var type: SuperViewCore.NVActivityIndicatorType
  @objc @IBInspectable final public var color: UIKit.UIColor
  @objc @IBInspectable final public var padding: CoreGraphics.CGFloat
  @available(*, deprecated)
  final public var animating: Swift.Bool {
    get
  }
  final public var isAnimating: Swift.Bool {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public init(frame: CoreGraphics.CGRect, type: SuperViewCore.NVActivityIndicatorType? = nil, color: UIKit.UIColor? = nil, padding: CoreGraphics.CGFloat? = nil)
  @objc override final public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override final public var bounds: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  final public func startAnimating()
  final public func stopAnimating()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SideMenuViewController : UIKit.UIViewController {
  @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  public func setViewController(_ selected: UIKit.UIViewController)
  public func showMenu()
  public func hideMenu()
  @objc public func dismissSideMenuViewController()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension SuperViewCore.NavigationBarState : Swift.Equatable {}
extension SuperViewCore.NavigationBarState : Swift.Hashable {}
extension SuperViewCore.NavigationBarState : Swift.RawRepresentable {}
extension SuperViewCore.NavigationBarCollapseDirection : Swift.Equatable {}
extension SuperViewCore.NavigationBarCollapseDirection : Swift.Hashable {}
extension SuperViewCore.NavigationBarCollapseDirection : Swift.RawRepresentable {}
extension SuperViewCore.NavigationBarFollowerCollapseDirection : Swift.Equatable {}
extension SuperViewCore.NavigationBarFollowerCollapseDirection : Swift.Hashable {}
extension SuperViewCore.NavigationBarFollowerCollapseDirection : Swift.RawRepresentable {}
extension SuperViewCore.SideMenuEnums.Position : Swift.Equatable {}
extension SuperViewCore.SideMenuEnums.Position : Swift.Hashable {}
extension SuperViewCore.RestMethod : Swift.Equatable {}
extension SuperViewCore.RestMethod : Swift.Hashable {}
extension SuperViewCore.RestMethod : Swift.RawRepresentable {}
extension SuperViewCore.Endpoint : Swift.Equatable {}
extension SuperViewCore.Endpoint : Swift.Hashable {}
extension SuperViewCore.Endpoint : Swift.RawRepresentable {}
extension SuperViewCore.SuperWebViewEvent : Swift.Equatable {}
extension SuperViewCore.SuperWebViewEvent : Swift.Hashable {}
extension SuperViewCore.NVActivityIndicatorType : Swift.Equatable {}
extension SuperViewCore.NVActivityIndicatorType : Swift.Hashable {}
extension SuperViewCore.NVActivityIndicatorType : Swift.RawRepresentable {}
